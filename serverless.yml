# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: demo
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
 
  profile: serverless
  stage: dev
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:ListBucket"
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:PutObjectAcl"
      Resource: 
        - 'arn:aws:s3:::destination-test-bucket-007/*'
        - 'arn:aws:s3:::source-test-bucket-007/*'
        

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  individually: true


functions:
  
  localtest:
    runtime: nodejs12.x
    handler: local-invoke-test.localtest

    # you can add packaging information here
    package:
      artifact: bin/nodejs_local_function.zip

  lambda_handler:
    runtime: python3.6
    handler: s3copy.lambda_handler

    # you can add packaging information here
    package:
      artifact: bin/python_s3_function.zip

    events:
      - s3:
          bucket: source-test-bucket-007
          event: s3:ObjectCreated:*

  lambda_layer_handler:
    runtime: python3.7
    handler: LayerTest.lambda_layer_handler

    # you can add packaging information here
    package:
      artifact: bin/python_layer_function.zip

    events:
      - http:
          path: test/layer
          method: get
    layers:
      - {Ref: TestlayerLambdaLayer}

  hello:
    runtime: dotnetcore3.1
    handler: CsharpHandlers::AwsDotnetCsharp.Handler::Hello

    # you can add packaging information here
    package:
      artifact: bin/csharp_function.zip
    #  exclude:
    #    - exclude-me.js
    #    - exclude-me-dir/**
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: users/create
          method: get
      - schedule: rate(21 minutes)
      - schedule: cron(0 12 * * ? *)
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      -cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2
layers:
  testlayer:
    path: lambda-layers
# you can add CloudFormation resource templates here
